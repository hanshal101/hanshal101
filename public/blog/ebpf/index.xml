<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Unlocking Linux Superpowers: A DEEP guide to eBPF on Hanshal Mehta</title>
    <link>http://localhost:1313/blog/ebpf/</link>
    <description>Recent content in Unlocking Linux Superpowers: A DEEP guide to eBPF on Hanshal Mehta</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://localhost:1313/blog/ebpf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>An Introduction to eBPF</title>
      <link>http://localhost:1313/blog/ebpf/introduction-to-ebpf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/ebpf/introduction-to-ebpf/</guid>
      <description>Motivation In this blog series, we will deep dive into the fascinating world of eBPF (Extended Berkley Packet Filter) and its internals. Along the way, we will explore core BPF (Berkley Packet Filter) internals that are essential to understanding how eBPF operates under the hood. This journey will also include networking concepts, operating system principles, and computer architecture, all of which play a crucial role in making eBPF effective and powerful.</description>
    </item>
    
    <item>
      <title>Networking with eBPF: From Fundamentals to Advanced Applications</title>
      <link>http://localhost:1313/blog/ebpf/networking-with-ebpf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/ebpf/networking-with-ebpf/</guid>
      <description>Motivation eBPF (extended Berkeley Packet Filter) has revolutionized how we implement networking functionality in Linux systems. This comprehensive blog explores the networking concepts involved in eBPF, covering everything from fundamental principles to advanced implementations. With eBPF, developers can run sandboxed programs within the kernel space, providing unprecedented control over network traffic without compromising system stability or requiring kernel modifications.
Introduction to eBPF eBPF represents a significant evolution from the original Berkeley Packet Filter.</description>
    </item>
    
    <item>
      <title>The Complete eBPF Function Reference: A Comprehensive Guide to libbpf Functions</title>
      <link>http://localhost:1313/blog/ebpf/a-comprehensive-guide-to-libbpf-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/ebpf/a-comprehensive-guide-to-libbpf-functions/</guid>
      <description>1. BTF (BPF Type Format) Functions Function Name Purpose Parameters Return Type When to Use Detailed Explanation bpf_btf_get_fd_by_id Get BTF file descriptor by ID __u32 id int When you need to access BTF object with known ID Returns file descriptor for BTF object with given ID. Useful for introspection tools to examine type information of loaded programs[^1] bpf_btf_get_fd_by_id_opts Get BTF file descriptor by ID with options __u32 id, const struct bpf_get_fd_by_id_opts *opts int When you need BTF access with specific options Extended version with options like token_fd for permission delegation bpf_btf_get_info_by_fd Get BTF information by file descriptor int btf_fd, struct bpf_btf_info *info, __u32 *info_len int When you need metadata about BTF object Populates BTF object information structure with metadata like name, BTF data size, etc.</description>
    </item>
    
  </channel>
</rss>
